name: Deploy URL Shortener Container

on:
  workflow_run:
    workflows: ["Version Check and Tag"]
    types:
      - completed
    branches:
      - main

permissions:
  contents: read
  packages: write

jobs:
  container-build:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    outputs:
      image-tag: ${{ steps.image-info.outputs.image-tag }}
      full-image: ${{ steps.image-info.outputs.full-image }}
      deploy-image: ${{ steps.image-info.outputs.deploy-image }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate image metadata
        id: image-info
        run: |
          # Lowercase repository name for container registry
          REPO_NAME=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          
          # For URL shortener, always use production tags on main branch
          IMAGE_NAME="ghcr.io/${REPO_NAME}"
          
          # Get version from the completed workflow
          if [ -f "CHANGELOG.md" ]; then
            VERSION=$(grep -m 1 -Po "## \[\K[0-9]+\.[0-9]+\.[0-9]+" CHANGELOG.md)
            IMAGE_TAG="$VERSION"
          else
            IMAGE_TAG="${{ github.sha }}"
          fi
          
          echo "image-name=$IMAGE_NAME" >> $GITHUB_OUTPUT
          echo "image-tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "full-image=$IMAGE_NAME:$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "deploy-image=$IMAGE_NAME:$IMAGE_TAG" >> $GITHUB_OUTPUT
          
          echo "Building container image: $IMAGE_NAME:$IMAGE_TAG"

      - name: Create Dockerfile
        run: |
          cat > Dockerfile << 'EOF'
          FROM python:3.11-slim

          # Install system dependencies
          RUN apt-get update && apt-get install -y \
              curl \
              && rm -rf /var/lib/apt/lists/*

          WORKDIR /app

          # Copy requirements first for better layer caching
          COPY requirements.txt ./
          
          # Install Python dependencies
          RUN pip install --no-cache-dir --upgrade pip && \
              pip install --no-cache-dir -r requirements.txt

          # Copy application code
          COPY . .

          # Create non-root user
          RUN addgroup --system --gid 1001 fastapi && \
              adduser --system --uid 1001 --gid 1001 fastapi

          # Set ownership
          RUN chown -R fastapi:fastapi /app

          USER fastapi

          EXPOSE 5000

          # Health check
          HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
            CMD curl -f http://localhost:5000/api/health || exit 1

          # Use uvicorn for production
          CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "5000", "--workers", "2"]
          EOF

      - name: Build and push container image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ steps.image-info.outputs.full-image }}
            ${{ steps.image-info.outputs.image-name }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

  deploy:
    runs-on: ubuntu-latest
    needs: [container-build]
    if: ${{ github.event.workflow_run.conclusion == 'success' }}

    steps:
      - name: Deploy container to VPS
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: 22
          script: |
            # Set deployment variables
            GH_TOKEN='${{ secrets.PAT_TOKEN }}'
            GH_ACTOR='${{ github.actor }}'
            IMAGE_NAME='${{ needs.container-build.outputs.deploy-image }}'
            CONTAINER_NAME='url-shortener-test'
            DOCKER_DIR='/srv/docker/primary-services'
            GH_SHA='${{ github.sha }}'
            
            echo "🚀 Deploying URL Shortener container to $(hostname -I)"
            echo "📦 Container: $CONTAINER_NAME"
            echo "📁 Docker Directory: $DOCKER_DIR"
            echo "📦 Image: $IMAGE_NAME"
            
            # Create docker directory
            sudo mkdir -p $DOCKER_DIR
            cd $DOCKER_DIR

            # Login to GitHub Container Registry
            echo "🔐 Logging into GitHub Container Registry..."
            
            if [ -z "$GH_TOKEN" ]; then
              echo "❌ ERROR: PAT_TOKEN is empty!"
              exit 1
            fi

            echo "$GH_TOKEN" | docker login ghcr.io -u "$GH_ACTOR" --password-stdin

            if [ $? -eq 0 ]; then
              echo "✅ Docker login successful"
            else
              echo "❌ Docker login failed"
              exit 1
            fi

            # Pull the new image
            echo "📥 Pulling new container image..."
            docker pull $IMAGE_NAME || {
              echo "❌ Failed to pull image"
              exit 1
            }
            echo "✅ Image pull successful"

            # Stop existing container if running
            echo "⏹️ Stopping existing URL Shortener container..."
            docker stop $CONTAINER_NAME || echo "No existing container to stop"
            docker rm $CONTAINER_NAME || echo "No existing container to remove"

            # Start new container using docker-compose
            echo "🚀 Starting new URL Shortener container..."
            
            # Update the docker-compose to use the new image
            sed -i "s|image: ghcr.io/.*ezcs-url-shortener.*|image: $IMAGE_NAME|" docker-compose.yml || echo "Could not update docker-compose image"
            
            # Start the container with the test profile
            docker-compose --profile test up -d url-shortener-test

            # Wait for container to start
            sleep 30

            # Verify container is running
            echo "🔍 Verifying container is running..."
            if docker ps | grep -q $CONTAINER_NAME; then
              echo "✅ Container '$CONTAINER_NAME' is running successfully"
              docker ps | grep $CONTAINER_NAME
              echo ""
              echo "📊 Container logs (last 10 lines):"
              docker logs --tail 10 $CONTAINER_NAME
            else
              echo "❌ Failed to start container '$CONTAINER_NAME'"
              echo "📋 Container logs:"
              docker logs $CONTAINER_NAME || echo "No logs available"
              exit 1
            fi

            # Test container health via Traefik (internal)
            echo "🔍 Testing container health..."
            for i in {1..30}; do
              if docker exec traefik wget -O - http://url-shortener-test:5000/api/health > /dev/null 2>&1; then
                echo "✅ Container health check passed"
                break
              fi
              echo "⏳ Waiting for container to be ready... (attempt $i/30)"
              sleep 3
            done

            # Final health check via traefik internal network
            if ! docker exec traefik wget -O - http://url-shortener-test:5000/api/health > /dev/null 2>&1; then
              echo "❌ Container failed health check after 90 seconds"
              echo "📋 Container logs:"
              docker logs $CONTAINER_NAME
              exit 1
            fi

            # Clean up old images (keep last 3)
            echo "🧹 Cleaning up old container images..."
            docker images ghcr.io/*ezcs-url-shortener* --format "table {{.Repository}}:{{.Tag}}\t{{.CreatedAt}}" | tail -n +2 | sort -k2 -r | tail -n +4 | awk '{print $1}' | xargs -r docker rmi || echo "No old images to remove"

            echo "🎉 URL Shortener container deployment complete!"
            echo "🌐 URL Shortener should be available at: https://test.ezcs.to"
            echo "📊 Final container status:"
            docker ps | head -1
            docker ps | grep $CONTAINER_NAME